{"version":3,"sources":["images/down.png","components/Header/Header.js","components/Wrapper/Wrapper.js","components/Wheel/Wheel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Wrapper","children","Wheel","handleSpin","deg","Math","floor","random","document","getElementById","style","transform","element","classList","remove","setTimeout","add","id","onClick","this","src","img","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,2KCiB5BC,MAdf,SAAgBC,GACd,OACE,yBAAKC,UAAU,aACb,gDACA,yDAGA,0ECHSC,MAJf,SAAiBF,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMG,W,4CC4D1BC,G,kNA1DbC,WAAa,WACX,IAGIC,EAAMC,KAAKC,OAAM,KAAAD,KAAKE,UAFlB,KAIRC,SAASC,eAAe,OAAOC,MAAMC,UAAY,UAAYP,EAAM,OAEnE,IAAIQ,EAAUJ,SAASC,eAAe,WACtCG,EAAQC,UAAUC,OAAO,WACzBC,YAAW,WACTH,EAAQC,UAAUG,IAAI,aACrB,M,uDAGH,OACE,yBAAKC,GAAG,UAAUlB,UAAU,WAC1B,yBAAKA,UAAU,eACb,4BAAQA,UAAU,uBAAuBmB,QAASC,KAAKhB,YAAvD,SAIA,6BACA,yBAAKJ,UAAU,QAAQqB,IAAMC,IAAKC,IAAI,WAExC,yBAAKL,GAAG,MAAMlB,UAAU,OACtB,yBAAKA,UAAU,QACb,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,iCAEF,0BAAMA,UAAU,SACd,kCAEF,0BAAMA,UAAU,SACd,0C,GAlDMwB,IAAMC,Y,MCYXC,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67d6d992.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down.2f6a8f29.png\";","import React from \"react\";\n\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbotron\">\n      <h1 >Time Out Spinner</h1>\n      <p>\n        Oh No! You're in Time-OUT!\n      </p>\n      <p>\n        Spin to see how many seconds you'll stay!\n      </p>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport img from \"../../images/down.png\"\n\nimport \"./Wheel.css\";\n\nclass Wheel extends React.Component {\n  handleSpin = () => {\n    let x = 1024;\n    let y = 9999;\n\n    let deg = Math.floor(Math.random() * (x - y)) + y;\n\n    document.getElementById(\"box\").style.transform = \"rotate(\" + deg + \"deg)\";\n\n    let element = document.getElementById(\"mainbox\");\n    element.classList.remove(\"animate\");\n    setTimeout(function () {\n      element.classList.add(\"animate\");\n    }, 5000);\n  };\n  render() {\n    return (\n      <div id=\"mainbox\" className=\"mainbox\">\n        <div className=\"button mt-4\">\n          <button className=\"btn btn-primary spin\" onClick={this.handleSpin}>\n            SPIN\n          </button>\n        </div>\n          <div>\n          <img className=\"arrow\" src= {img} alt=\"arrow\"/>\n          </div>\n        <div id=\"box\" className=\"box\">\n          <div className=\"box1\">\n            <span className=\"span1\">\n              <b>30</b>\n            </span>\n            <span className=\"span2\">\n              <b>45</b>\n            </span>\n            <span className=\"span3\">\n              <b>60</b>\n            </span>\n            <span className=\"span4\">\n              <b>75</b>\n            </span>\n            <span className=\"span5\">\n              <b>20</b>\n            </span>\n            <span className=\"span6\">\n              <b>0</b>\n            </span>\n            <span className=\"span7\">\n              <b>90</b>\n            </span>\n            <span className=\"span8\">\n              <b>100</b>\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Wheel;\n","import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Wheel from \"./components/Wheel/Wheel\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Wheel />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}